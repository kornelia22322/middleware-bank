//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var AccountService = require('./AccountService');
var AccountServiceClient = AccountService.Client;
var AccountServiceProcessor = AccountService.Processor;
var ttypes = require('./bank_types');
//HELPER FUNCTIONS AND STRUCTURES

var PremiumAccountService_getLoanDetails_args = function(args) {
  this.guid = null;
  this.loanParameters = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.loanParameters !== undefined && args.loanParameters !== null) {
      this.loanParameters = new ttypes.LoanParameters(args.loanParameters);
    }
  }
};
PremiumAccountService_getLoanDetails_args.prototype = {};
PremiumAccountService_getLoanDetails_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loanParameters = new ttypes.LoanParameters();
        this.loanParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PremiumAccountService_getLoanDetails_args.prototype.write = function(output) {
  output.writeStructBegin('PremiumAccountService_getLoanDetails_args');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.loanParameters !== null && this.loanParameters !== undefined) {
    output.writeFieldBegin('loanParameters', Thrift.Type.STRUCT, 2);
    this.loanParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PremiumAccountService_getLoanDetails_result = function(args) {
  this.success = null;
  this.authorizationException = null;
  this.invalidArgumentException = null;
  if (args instanceof ttypes.AuthorizationException) {
    this.authorizationException = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgumentException) {
    this.invalidArgumentException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LoanCosts(args.success);
    }
    if (args.authorizationException !== undefined && args.authorizationException !== null) {
      this.authorizationException = args.authorizationException;
    }
    if (args.invalidArgumentException !== undefined && args.invalidArgumentException !== null) {
      this.invalidArgumentException = args.invalidArgumentException;
    }
  }
};
PremiumAccountService_getLoanDetails_result.prototype = {};
PremiumAccountService_getLoanDetails_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LoanCosts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorizationException = new ttypes.AuthorizationException();
        this.authorizationException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalidArgumentException = new ttypes.InvalidArgumentException();
        this.invalidArgumentException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PremiumAccountService_getLoanDetails_result.prototype.write = function(output) {
  output.writeStructBegin('PremiumAccountService_getLoanDetails_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.authorizationException !== null && this.authorizationException !== undefined) {
    output.writeFieldBegin('authorizationException', Thrift.Type.STRUCT, 1);
    this.authorizationException.write(output);
    output.writeFieldEnd();
  }
  if (this.invalidArgumentException !== null && this.invalidArgumentException !== undefined) {
    output.writeFieldBegin('invalidArgumentException', Thrift.Type.STRUCT, 2);
    this.invalidArgumentException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PremiumAccountServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PremiumAccountServiceClient, AccountServiceClient);
PremiumAccountServiceClient.prototype.seqid = function() { return this._seqid; };
PremiumAccountServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
PremiumAccountServiceClient.prototype.getLoanDetails = function(guid, loanParameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLoanDetails(guid, loanParameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLoanDetails(guid, loanParameters);
  }
};

PremiumAccountServiceClient.prototype.send_getLoanDetails = function(guid, loanParameters) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLoanDetails', Thrift.MessageType.CALL, this.seqid());
  var params = {
    guid: guid,
    loanParameters: loanParameters
  };
  var args = new PremiumAccountService_getLoanDetails_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PremiumAccountServiceClient.prototype.recv_getLoanDetails = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PremiumAccountService_getLoanDetails_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.authorizationException) {
    return callback(result.authorizationException);
  }
  if (null !== result.invalidArgumentException) {
    return callback(result.invalidArgumentException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLoanDetails failed: unknown result');
};
var PremiumAccountServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PremiumAccountServiceProcessor, AccountServiceProcessor);
PremiumAccountServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PremiumAccountServiceProcessor.prototype.process_getLoanDetails = function(seqid, input, output) {
  var args = new PremiumAccountService_getLoanDetails_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLoanDetails.length === 2) {
    Q.fcall(this._handler.getLoanDetails.bind(this._handler), args.guid, args.loanParameters)
      .then(function(result) {
        var result_obj = new PremiumAccountService_getLoanDetails_result({success: result});
        output.writeMessageBegin("getLoanDetails", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.AuthorizationException || err instanceof ttypes.InvalidArgumentException) {
          result = new PremiumAccountService_getLoanDetails_result(err);
          output.writeMessageBegin("getLoanDetails", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLoanDetails", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLoanDetails(args.guid, args.loanParameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.AuthorizationException || err instanceof ttypes.InvalidArgumentException) {
        result_obj = new PremiumAccountService_getLoanDetails_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLoanDetails", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLoanDetails", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
