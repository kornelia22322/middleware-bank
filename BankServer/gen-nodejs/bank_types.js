//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Data = module.exports.Data = function(args) {
  this.pesel = null;
  this.firstname = null;
  this.surname = null;
  this.income = null;
  if (args) {
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.firstname !== undefined && args.firstname !== null) {
      this.firstname = args.firstname;
    }
    if (args.surname !== undefined && args.surname !== null) {
      this.surname = args.surname;
    }
    if (args.income !== undefined && args.income !== null) {
      this.income = args.income;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.surname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.income = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 1);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.firstname !== null && this.firstname !== undefined) {
    output.writeFieldBegin('firstname', Thrift.Type.STRING, 2);
    output.writeString(this.firstname);
    output.writeFieldEnd();
  }
  if (this.surname !== null && this.surname !== undefined) {
    output.writeFieldBegin('surname', Thrift.Type.STRING, 3);
    output.writeString(this.surname);
    output.writeFieldEnd();
  }
  if (this.income !== null && this.income !== undefined) {
    output.writeFieldBegin('income', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.income);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoanCosts = module.exports.LoanCosts = function(args) {
  this.currencyCost = null;
  if (args) {
    if (args.currencyCost !== undefined && args.currencyCost !== null) {
      this.currencyCost = args.currencyCost;
    }
  }
};
LoanCosts.prototype = {};
LoanCosts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.currencyCost = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoanCosts.prototype.write = function(output) {
  output.writeStructBegin('LoanCosts');
  if (this.currencyCost !== null && this.currencyCost !== undefined) {
    output.writeFieldBegin('currencyCost', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.currencyCost);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoanConfig = module.exports.LoanConfig = function(args) {
  this.currency = null;
  this.moneyAmount = null;
  this.daysCount = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.moneyAmount !== undefined && args.moneyAmount !== null) {
      this.moneyAmount = args.moneyAmount;
    }
    if (args.daysCount !== undefined && args.daysCount !== null) {
      this.daysCount = args.daysCount;
    }
  }
};
LoanConfig.prototype = {};
LoanConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.moneyAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.daysCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoanConfig.prototype.write = function(output) {
  output.writeStructBegin('LoanConfig');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 1);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.moneyAmount !== null && this.moneyAmount !== undefined) {
    output.writeFieldBegin('moneyAmount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.moneyAmount);
    output.writeFieldEnd();
  }
  if (this.daysCount !== null && this.daysCount !== undefined) {
    output.writeFieldBegin('daysCount', Thrift.Type.I32, 3);
    output.writeI32(this.daysCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccountInfo = module.exports.AccountInfo = function(args) {
  this.balance = null;
  this.guid = null;
  this.isPremium = null;
  if (args) {
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.isPremium !== undefined && args.isPremium !== null) {
      this.isPremium = args.isPremium;
    }
  }
};
AccountInfo.prototype = {};
AccountInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.balance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.guid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isPremium = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountInfo.prototype.write = function(output) {
  output.writeStructBegin('AccountInfo');
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.balance);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.I32, 2);
    output.writeI32(this.guid);
    output.writeFieldEnd();
  }
  if (this.isPremium !== null && this.isPremium !== undefined) {
    output.writeFieldBegin('isPremium', Thrift.Type.BOOL, 3);
    output.writeBool(this.isPremium);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthorizationException = module.exports.AuthorizationException = function(args) {
  Thrift.TException.call(this, "AuthorizationException");
  this.name = "AuthorizationException";
  this.why = null;
  if (args) {
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(AuthorizationException, Thrift.TException);
AuthorizationException.prototype.name = 'AuthorizationException';
AuthorizationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthorizationException.prototype.write = function(output) {
  output.writeStructBegin('AuthorizationException');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

