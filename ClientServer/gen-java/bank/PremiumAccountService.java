/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bank;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-02")
public class PremiumAccountService {

  public interface Iface extends AccountService.Iface {

    public LoanCosts getLoanInfo(int guid, LoanConfig loanConfig) throws AuthorizationException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends AccountService .AsyncIface {

    public void getLoanInfo(int guid, LoanConfig loanConfig, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends AccountService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public LoanCosts getLoanInfo(int guid, LoanConfig loanConfig) throws AuthorizationException, org.apache.thrift.TException
    {
      send_getLoanInfo(guid, loanConfig);
      return recv_getLoanInfo();
    }

    public void send_getLoanInfo(int guid, LoanConfig loanConfig) throws org.apache.thrift.TException
    {
      getLoanInfo_args args = new getLoanInfo_args();
      args.setGuid(guid);
      args.setLoanConfig(loanConfig);
      sendBase("getLoanInfo", args);
    }

    public LoanCosts recv_getLoanInfo() throws AuthorizationException, org.apache.thrift.TException
    {
      getLoanInfo_result result = new getLoanInfo_result();
      receiveBase(result, "getLoanInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authorizationException != null) {
        throw result.authorizationException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends AccountService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLoanInfo(int guid, LoanConfig loanConfig, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanInfo_call method_call = new getLoanInfo_call(guid, loanConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanInfo_call extends org.apache.thrift.async.TAsyncMethodCall<LoanCosts> {
      private int guid;
      private LoanConfig loanConfig;
      public getLoanInfo_call(int guid, LoanConfig loanConfig, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.guid = guid;
        this.loanConfig = loanConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanInfo_args args = new getLoanInfo_args();
        args.setGuid(guid);
        args.setLoanConfig(loanConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanCosts getResult() throws AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends AccountService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLoanInfo", new getLoanInfo());
      return processMap;
    }

    public static class getLoanInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanInfo_args> {
      public getLoanInfo() {
        super("getLoanInfo");
      }

      public getLoanInfo_args getEmptyArgsInstance() {
        return new getLoanInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getLoanInfo_result getResult(I iface, getLoanInfo_args args) throws org.apache.thrift.TException {
        getLoanInfo_result result = new getLoanInfo_result();
        try {
          result.success = iface.getLoanInfo(args.guid, args.loanConfig);
        } catch (AuthorizationException authorizationException) {
          result.authorizationException = authorizationException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends AccountService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getLoanInfo", new getLoanInfo());
      return processMap;
    }

    public static class getLoanInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanInfo_args, LoanCosts> {
      public getLoanInfo() {
        super("getLoanInfo");
      }

      public getLoanInfo_args getEmptyArgsInstance() {
        return new getLoanInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<LoanCosts> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<LoanCosts>() { 
          public void onComplete(LoanCosts o) {
            getLoanInfo_result result = new getLoanInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLoanInfo_result result = new getLoanInfo_result();
            if (e instanceof AuthorizationException) {
              result.authorizationException = (AuthorizationException) e;
              result.setAuthorizationExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanInfo_args args, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler) throws org.apache.thrift.TException {
        iface.getLoanInfo(args.guid, args.loanConfig,resultHandler);
      }
    }

  }

  public static class getLoanInfo_args implements org.apache.thrift.TBase<getLoanInfo_args, getLoanInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanInfo_args");

    private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOAN_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("loanConfig", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLoanInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLoanInfo_argsTupleSchemeFactory();

    public int guid; // required
    public LoanConfig loanConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GUID((short)1, "guid"),
      LOAN_CONFIG((short)2, "loanConfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GUID
            return GUID;
          case 2: // LOAN_CONFIG
            return LOAN_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("loanConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanConfig.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanInfo_args.class, metaDataMap);
    }

    public getLoanInfo_args() {
    }

    public getLoanInfo_args(
      int guid,
      LoanConfig loanConfig)
    {
      this();
      this.guid = guid;
      setGuidIsSet(true);
      this.loanConfig = loanConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanInfo_args(getLoanInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.guid = other.guid;
      if (other.isSetLoanConfig()) {
        this.loanConfig = new LoanConfig(other.loanConfig);
      }
    }

    public getLoanInfo_args deepCopy() {
      return new getLoanInfo_args(this);
    }

    @Override
    public void clear() {
      setGuidIsSet(false);
      this.guid = 0;
      this.loanConfig = null;
    }

    public int getGuid() {
      return this.guid;
    }

    public getLoanInfo_args setGuid(int guid) {
      this.guid = guid;
      setGuidIsSet(true);
      return this;
    }

    public void unsetGuid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GUID_ISSET_ID);
    }

    /** Returns true if field guid is set (has been assigned a value) and false otherwise */
    public boolean isSetGuid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GUID_ISSET_ID);
    }

    public void setGuidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GUID_ISSET_ID, value);
    }

    public LoanConfig getLoanConfig() {
      return this.loanConfig;
    }

    public getLoanInfo_args setLoanConfig(LoanConfig loanConfig) {
      this.loanConfig = loanConfig;
      return this;
    }

    public void unsetLoanConfig() {
      this.loanConfig = null;
    }

    /** Returns true if field loanConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanConfig() {
      return this.loanConfig != null;
    }

    public void setLoanConfigIsSet(boolean value) {
      if (!value) {
        this.loanConfig = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((java.lang.Integer)value);
        }
        break;

      case LOAN_CONFIG:
        if (value == null) {
          unsetLoanConfig();
        } else {
          setLoanConfig((LoanConfig)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GUID:
        return getGuid();

      case LOAN_CONFIG:
        return getLoanConfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GUID:
        return isSetGuid();
      case LOAN_CONFIG:
        return isSetLoanConfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanInfo_args)
        return this.equals((getLoanInfo_args)that);
      return false;
    }

    public boolean equals(getLoanInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_guid = true;
      boolean that_present_guid = true;
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (this.guid != that.guid)
          return false;
      }

      boolean this_present_loanConfig = true && this.isSetLoanConfig();
      boolean that_present_loanConfig = true && that.isSetLoanConfig();
      if (this_present_loanConfig || that_present_loanConfig) {
        if (!(this_present_loanConfig && that_present_loanConfig))
          return false;
        if (!this.loanConfig.equals(that.loanConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + guid;

      hashCode = hashCode * 8191 + ((isSetLoanConfig()) ? 131071 : 524287);
      if (isSetLoanConfig())
        hashCode = hashCode * 8191 + loanConfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLoanInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoanConfig()).compareTo(other.isSetLoanConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanConfig, other.loanConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLoanInfo_args(");
      boolean first = true;

      sb.append("guid:");
      sb.append(this.guid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanConfig:");
      if (this.loanConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.loanConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanConfig != null) {
        loanConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanInfo_argsStandardScheme getScheme() {
        return new getLoanInfo_argsStandardScheme();
      }
    }

    private static class getLoanInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLoanInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GUID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.guid = iprot.readI32();
                struct.setGuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOAN_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanConfig = new LoanConfig();
                struct.loanConfig.read(iprot);
                struct.setLoanConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeI32(struct.guid);
        oprot.writeFieldEnd();
        if (struct.loanConfig != null) {
          oprot.writeFieldBegin(LOAN_CONFIG_FIELD_DESC);
          struct.loanConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanInfo_argsTupleScheme getScheme() {
        return new getLoanInfo_argsTupleScheme();
      }
    }

    private static class getLoanInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLoanInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGuid()) {
          optionals.set(0);
        }
        if (struct.isSetLoanConfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGuid()) {
          oprot.writeI32(struct.guid);
        }
        if (struct.isSetLoanConfig()) {
          struct.loanConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.guid = iprot.readI32();
          struct.setGuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loanConfig = new LoanConfig();
          struct.loanConfig.read(iprot);
          struct.setLoanConfigIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLoanInfo_result implements org.apache.thrift.TBase<getLoanInfo_result, getLoanInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizationException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLoanInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLoanInfo_resultTupleSchemeFactory();

    public LoanCosts success; // required
    public AuthorizationException authorizationException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTHORIZATION_EXCEPTION((short)1, "authorizationException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanCosts.class)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorizationException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanInfo_result.class, metaDataMap);
    }

    public getLoanInfo_result() {
    }

    public getLoanInfo_result(
      LoanCosts success,
      AuthorizationException authorizationException)
    {
      this();
      this.success = success;
      this.authorizationException = authorizationException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanInfo_result(getLoanInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanCosts(other.success);
      }
      if (other.isSetAuthorizationException()) {
        this.authorizationException = new AuthorizationException(other.authorizationException);
      }
    }

    public getLoanInfo_result deepCopy() {
      return new getLoanInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authorizationException = null;
    }

    public LoanCosts getSuccess() {
      return this.success;
    }

    public getLoanInfo_result setSuccess(LoanCosts success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthorizationException() {
      return this.authorizationException;
    }

    public getLoanInfo_result setAuthorizationException(AuthorizationException authorizationException) {
      this.authorizationException = authorizationException;
      return this;
    }

    public void unsetAuthorizationException() {
      this.authorizationException = null;
    }

    /** Returns true if field authorizationException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorizationException() {
      return this.authorizationException != null;
    }

    public void setAuthorizationExceptionIsSet(boolean value) {
      if (!value) {
        this.authorizationException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanCosts)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorizationException();
        } else {
          setAuthorizationException((AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorizationException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorizationException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanInfo_result)
        return this.equals((getLoanInfo_result)that);
      return false;
    }

    public boolean equals(getLoanInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authorizationException = true && this.isSetAuthorizationException();
      boolean that_present_authorizationException = true && that.isSetAuthorizationException();
      if (this_present_authorizationException || that_present_authorizationException) {
        if (!(this_present_authorizationException && that_present_authorizationException))
          return false;
        if (!this.authorizationException.equals(that.authorizationException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAuthorizationException()) ? 131071 : 524287);
      if (isSetAuthorizationException())
        hashCode = hashCode * 8191 + authorizationException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLoanInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAuthorizationException()).compareTo(other.isSetAuthorizationException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizationException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizationException, other.authorizationException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLoanInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorizationException:");
      if (this.authorizationException == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizationException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanInfo_resultStandardScheme getScheme() {
        return new getLoanInfo_resultStandardScheme();
      }
    }

    private static class getLoanInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLoanInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanCosts();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorizationException = new AuthorizationException();
                struct.authorizationException.read(iprot);
                struct.setAuthorizationExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorizationException != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorizationException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanInfo_resultTupleScheme getScheme() {
        return new getLoanInfo_resultTupleScheme();
      }
    }

    private static class getLoanInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLoanInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthorizationException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthorizationException()) {
          struct.authorizationException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LoanCosts();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authorizationException = new AuthorizationException();
          struct.authorizationException.read(iprot);
          struct.setAuthorizationExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
